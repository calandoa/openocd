==> jtag_parse_ac.py <==
#!/usr/bin/env python

import sys
import argparse
import textwrap
import binascii
import bitarray

A = lambda x: x
while sys.argv[1:]:

==> ocd.log <==
	"frame_raw": ["1b0010b0a9ec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b0010c0a8ec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b0010a0a9ec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b00b0a8a9ec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b001070abec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b001040b0ec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b0000b9a9ec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b00b038acec04a4ffff0000000009000101000d008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["1b0010d0afec04a4ffff0000000009000001000d0002030600000082c3e3800a8b", 0, 33, 0, 1],
	"frame_raw": ["1b00b0d8afec04a4ffff0000000009000001000d0002030300000082c3e3", 0, 30, 0, 1],
	"frame_raw": ["003c35b70088ffff5303020402002d00d4db335a00000000de340f008dffffff0c0000000c00000000000000000000000000000000000000000000000000000080080b82020285978a862b01", 0, 76, 0, 1],
	"frame_raw": ["003c35b70088ffff5303020402002d00d4db335a00000000e5380f008dffffff0500000005000000000000000000000000000000000000000000000000000000978a862b01", 0, 69, 0, 1],
	"frame_raw": ["40b57cb70088ffff5303020402002d00d4db335a00000000fa3b0f008dffffff03000000030000000000000000000000000000000000000000000000000000004b067f", 0, 67, 0, 1],
	"frame_raw": ["40b57cb70088ffff5303020402002d00d4db335a000000008c3f0f008dffffff66000000660000000000000000000000000000000000000000000000000000004b0617395200ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3b067f6b00814b00804b067f87", 0, 166, 0, 1],
	"frame_raw": ["00b07cb70088ffff4303810402002d00d5db335a00000000b918000000000000570000005700000000000000000000000000000000000000000200000000000032604140e43affffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 0, 151, 0, 1],
	"frame_raw": ["80a4eb340088ffff5303020402002d00d5db335a00000000d11b00008dffffff14000000140000000000000000000000000000000000000000000000000000004b061b390000ff3b02ff6b00814b00804b020387", 0, 84, 0, 1],
	"frame_raw": ["80adeb340088ffff4303810402002d00d5db335a00000000971d00000000000005000000050000000000000000000000000000000000000000020000000000003260e1fcfe", 0, 69, 0, 1],
	"frame_raw": ["                                                                          1b00b0e8b7f78e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b00b0387ef98e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b0040b4eff98e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b00d0e719f98e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b004074e0f88e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b00b0f842f98e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b0010c326f98e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b00e045d1f88e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b0070a70af78e97ffff0000000009000101000b008103020000003260", 0, 29, 0, 1],
	"frame_raw": ["                                                                          1b004074e0f88e97ffff0000000009000001000b0002030d0000004b03033f07113f00006b020387", 0, 40, 0, 1],

==> usb.log <==

==> x <==




1 0000 0100 0000 0100 0100 1110 1011 1001 1111
    0    4   0     4    4   e    b    9     f

1110 0100

41 40 e4 3a

1 1111 0011 1010 1110 0100 0100 0000 0100 0001

   f    3     a    e   4    4    0    4    1


0x3ae44041

tdo [2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

xxxx



0 0000
1 0001
2 0010
3 0011
4 0100
5 0101
6 0110
7 0111
8 1000
9 1001
a 1010
b 1011
c 1100
d 1101
e 1110
f 1111



[1, 1, 0, 0] [0, 0, 0, 0, ][ 0, 0, 0, 0, ] [ 0, 1, 1, 0]

tdi [0, 0, 0, 0]
tdo [2, 2, 2, 2] []
RUN_TEST_IDLE
SELECT_DR_SCAN
SELECT_IR_SCAN
CAPTURE_IR
- 3f/011 1111 [8]
- 3f/011 1111 [1]
- 6b/110 1011 [3]
- execute queue [8, 1, 3]
19 (processing < 32:60:01:00:e0 )




0               000 0000   Reserved
1		000 0001   Reserved

2		000 0010   JTAG ID (read-only)

3		000 0011-
F		000 1111   Reserved

10		001 0000   CPU Scan Register (CPUSCR)
11		001 0001   No Register Selected (Bypass)
12		001 0010   OnCE Control Register (OCR)

13		001 0011-   Reserved
1F		001 1111   Reserved

20		010 0000   Instruction Address Compare 1 (IAC1)
21		010 0001   Instruction Address Compare 2 (IAC2)
22		010 0010   Instruction Address Compare 3 (IAC3)
23		010 0011   Instruction Address Compare 4 (IAC4)
24		010 0100   Data Address Compare 1 (DAC1)
25		010 0101   Data Address Compare 2 (DAC2)

26		010 0110-
2f		010 1111   Reserved

30		011 0000   Debug Status Register (DBSR)
31		011 0001   Debug Control Register 0 (DBCR0)
32		011 0010   Debug Control Register 1 (DBCR1)
33		011 0011   Debug Control Register 2 (DBCR2)

34		011 0100-
6e		110 1110   Reserved

6f		110 1111   Shared Nexus Control Register Register Select
70		111 0000-
79		111 1001   General Purpose register selects [0:9]

7a		111 1010   Reserved
7b		111 1011   Reserved

7c		111 1100   Nexus2/3-Access

7d		111 1101   Reserved

7e		111 1110   Enable_OnCE 1
7f		111 1111   Bypass


0x2	JTAG ID (read-only)
0x10	CPU Scan Register (CPUSCR)
0x11	No Register Selected (Bypass)
0x12	OnCE Control Register (OCR)
0x20	Instruction Address Compare 1 (IAC1)
0x21	Instruction Address Compare 2 (IAC2)
0x22	Instruction Address Compare 3 (IAC3)
0x23	Instruction Address Compare 4 (IAC4)
0x24	Data Address Compare 1 (DAC1)
0x25	Data Address Compare 2 (DAC2)
0x30	Debug Status Register (DBSR)
0x31	Debug Control Register 0 (DBCR0)
0x32	Debug Control Register 1 (DBCR1)
0x33	Debug Control Register 2 (DBCR2)
0x6f	Shared Nexus Control Register Register Select
0x79	General Purpose register selects [0:9]
0x7c	Nexus2/3-Access
0x7e	Enable_OnCE 1
0x7f	Bypass





Executing 0x53fe0000 : e_lwz r31, 0(wbbrlo(40009f00))



53fe0000


0101 0011 1111 1110 0 0 0 0

010100 11111 11110 0 0 0 0




R:10c00331
R:


90c00331



1001 0000 1100 0000          00000011 0011 0001

 1  0   010 000 11 000000 00000011001100 0 1

 1  0   010 000 11 000000 00000011001100 0 1
 0  0   010 000 11 000000 00000011001100 0 1

AC RW   SZ  MAP PR    -   CNT           ERR DV





USHORT       headerLen; /* This header length */
UINT64       irpId;     /* I/O Request packet ID */
USBD_STATUS  status;    /* USB status code
			(on return from host controller) */
USHORT       function;  /* URB Function */
UCHAR        info;      /* I/O Request info */

USHORT       bus;       /* bus (RootHub) number */
USHORT       device;    /* device address */
UCHAR        endpoint;  /* endpoint number and transfer direction */
UCHAR        transfer;  /* transfer type */

UINT32       dataLength;/* Data length */

x                                                                           1b00 101016fa8e97ffff 00000000 0900 01 0100 0b00 81 03 02000000 3260
x                                                                                809788b40088ffff 43038104 0200 2d 0001 c243 5a 00 00000069 6e04000000000005000000050000 0000000000000000 00000000 0000 00 0000 0002 00 00 00000000 3260412010
x 809788b40088ffff4303810402002d0001c2435a00000000696e04000000000005000000050000 0000000000000000 00000000 0000 00 0000 0002 00 00 00000000 3260412010


809788b40088ffff 43 03 81 04 0200 2d 00 01c2435a00000000 696e0400 00000000 05000000 05000000 00000000 00000000 00000000 00000000 00020000 00000000 3260412010
80edb2380188ffff 53 02 80 04 0200 00 3c f9c1435a00000000 a73c0100 8dffffff 28000000 00000000 80060001 00002800 00000000 00000000 00020000 00000000


struct usbmon_packet {
199		u64 id;			/*  0: URB ID - from submission to callback */
200		unsigned char type;	/*  8: Same as text; extensible. */
201		unsigned char xfer_type; /*    ISO (0), Intr, Control, Bulk (3) */
202		unsigned char epnum;	/*     Endpoint number and transfer direction */
203		unsigned char devnum;	/*     Device address */
204		u16 busnum;		/* 12: Bus number */
205		char flag_setup;	/* 14: Same as text */
206		char flag_data;		/* 15: Same as text; Binary zero is OK. */
207		s64 ts_sec;		/* 16: gettimeofday */
208		s32 ts_usec;		/* 24: gettimeofday */
209		int status;		/* 28: */
210		unsigned int length;	/* 32: Length of data (submitted or actual) */
211		unsigned int len_cap;	/* 36: Delivered length */
212		union {			/* 40: */
213			unsigned char setup[SETUP_LEN];	/* Only for Control S-type */
214			struct iso_rec {		/* Only for ISO */
215				int error_count;
216				int numdesc;
217			} iso;
218		} s;
219		int interval;		/* 48: Only for Interrupt and ISO */
220		int start_frame;	/* 52: For ISO */
221		unsigned int xfer_flags; /* 56: copy of URB's transfer_flags */
222		unsigned int ndesc;	/* 60: Actual number of ISO descriptors */
223	};				/* 64 to
